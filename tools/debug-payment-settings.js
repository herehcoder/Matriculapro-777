/**
 * Ferramenta para diagn√≥stico e depura√ß√£o das configura√ß√µes de gateway de pagamento
 * 
 * Esta ferramenta ajuda a identificar e resolver problemas comuns com as configura√ß√µes
 * de gateway de pagamento no banco de dados.
 */

import pg from 'pg';
const { Pool } = pg;

// Inicializar conex√£o com o banco de dados
if (!process.env.DATABASE_URL) {
  console.error('A vari√°vel DATABASE_URL n√£o est√° definida.');
  process.exit(1);
}

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

// Fun√ß√µes de diagn√≥stico
async function checkTableStructure() {
  console.log('\n=== Verificando estrutura da tabela payment_gateway_settings ===');
  
  try {
    const { rows } = await pool.query(`
      SELECT column_name, data_type, is_nullable
      FROM information_schema.columns
      WHERE table_name = 'payment_gateway_settings'
      ORDER BY ordinal_position
    `);
    
    if (rows.length === 0) {
      console.error('‚ùå A tabela payment_gateway_settings n√£o existe!');
      return false;
    }
    
    console.log('‚úÖ Tabela payment_gateway_settings encontrada');
    console.log('\nColunas:');
    rows.forEach(col => {
      console.log(`  - ${col.column_name} (${col.data_type}, ${col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'})`);
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao verificar estrutura da tabela:', error.message);
    return false;
  }
}

async function listAllGateways() {
  console.log('\n=== Listando todas as configura√ß√µes de gateway ===');
  
  try {
    const { rows } = await pool.query(`
      SELECT 
        id, 
        gateway, 
        name, 
        is_active, 
        is_default, 
        sandbox_mode,
        CASE WHEN api_key IS NOT NULL THEN TRUE ELSE FALSE END as has_api_key,
        CASE WHEN api_secret IS NOT NULL THEN TRUE ELSE FALSE END as has_api_secret,
        created_at,
        updated_at
      FROM payment_gateway_settings
      ORDER BY is_default DESC, is_active DESC, id ASC
    `);
    
    if (rows.length === 0) {
      console.log('Nenhuma configura√ß√£o de gateway encontrada.');
      return [];
    }
    
    console.log(`\nEncontradas ${rows.length} configura√ß√µes:`);
    rows.forEach(gateway => {
      const status = gateway.is_active 
        ? (gateway.is_default ? '‚úì PADR√ÉO' : '‚úì ATIVO') 
        : '‚úó INATIVO';
      
      const mode = gateway.sandbox_mode ? 'üß™ SANDBOX' : 'üöÄ PRODU√á√ÉO';
      
      const apiStatus = gateway.has_api_key 
        ? 'üîë Chave configurada' 
        : '‚ö†Ô∏è SEM CHAVE API';
      
      console.log(
        `\n${gateway.id}. ${gateway.name} (${gateway.gateway}) - ${status}, ${mode}\n` +
        `   ${apiStatus}` +
        `   Atualizado em: ${new Date(gateway.updated_at).toLocaleString()}`
      );
    });
    
    return rows;
  } catch (error) {
    console.error('‚ùå Erro ao listar gateways:', error.message);
    return [];
  }
}

async function checkForCommonIssues(gateways) {
  console.log('\n=== Verificando problemas comuns ===');
  
  if (gateways.length === 0) {
    console.log('Nenhum gateway para verificar.');
    return;
  }
  
  // Verificar gateways sem chave API
  const missingApiKeys = gateways.filter(g => !g.has_api_key && g.is_active);
  if (missingApiKeys.length > 0) {
    console.log('\n‚ö†Ô∏è Gateways ATIVOS sem chave API configurada:');
    missingApiKeys.forEach(g => {
      console.log(`  - ${g.name} (ID: ${g.id})`);
    });
  } else {
    console.log('‚úÖ Todos os gateways ativos possuem chaves API configuradas');
  }
  
  // Verificar gateway padr√£o
  const defaultGateways = gateways.filter(g => g.is_default);
  if (defaultGateways.length === 0) {
    console.log('\n‚ö†Ô∏è Nenhum gateway definido como padr√£o');
  } else if (defaultGateways.length > 1) {
    console.log('\n‚ö†Ô∏è M√∫ltiplos gateways definidos como padr√£o (deveria ser apenas um):');
    defaultGateways.forEach(g => {
      console.log(`  - ${g.name} (ID: ${g.id})`);
    });
  } else {
    console.log(`\n‚úÖ Gateway padr√£o: ${defaultGateways[0].name} (ID: ${defaultGateways[0].id})`);
  }
  
  // Verificar gateways inativos com chaves API
  const inactiveWithKeys = gateways.filter(g => g.has_api_key && !g.is_active);
  if (inactiveWithKeys.length > 0) {
    console.log('\n‚ÑπÔ∏è Gateways INATIVOS com chaves API configuradas:');
    inactiveWithKeys.forEach(g => {
      console.log(`  - ${g.name} (ID: ${g.id})`);
    });
  }
}

// Fun√ß√µes de corre√ß√£o
async function toggleSandboxMode(gatewayId, enableSandbox) {
  console.log(`\n=== ${enableSandbox ? 'Ativando' : 'Desativando'} modo sandbox para gateway ID ${gatewayId} ===`);
  
  try {
    const { rows } = await pool.query(`
      UPDATE payment_gateway_settings
      SET 
        sandbox_mode = $1,
        updated_at = NOW()
      WHERE id = $2
      RETURNING id, name, sandbox_mode
    `, [enableSandbox, gatewayId]);
    
    if (rows.length === 0) {
      console.error(`‚ùå Gateway com ID ${gatewayId} n√£o encontrado`);
      return false;
    }
    
    console.log(`‚úÖ Gateway "${rows[0].name}" atualizado com sucesso`);
    console.log(`   Modo sandbox: ${rows[0].sandbox_mode ? 'ATIVADO' : 'DESATIVADO'}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao alterar modo sandbox:', error.message);
    return false;
  }
}

async function setDefaultGateway(gatewayId) {
  console.log(`\n=== Definindo gateway ID ${gatewayId} como padr√£o ===`);
  
  try {
    // Primeiro, desmarcar todos como padr√£o
    await pool.query(`
      UPDATE payment_gateway_settings
      SET 
        is_default = FALSE,
        updated_at = NOW()
      WHERE is_default = TRUE
    `);
    
    // Agora, definir o novo padr√£o
    const { rows } = await pool.query(`
      UPDATE payment_gateway_settings
      SET 
        is_default = TRUE,
        is_active = TRUE,
        updated_at = NOW()
      WHERE id = $1
      RETURNING id, name
    `, [gatewayId]);
    
    if (rows.length === 0) {
      console.error(`‚ùå Gateway com ID ${gatewayId} n√£o encontrado`);
      return false;
    }
    
    console.log(`‚úÖ Gateway "${rows[0].name}" definido como padr√£o com sucesso`);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao definir gateway padr√£o:', error.message);
    return false;
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    console.log('üîç Iniciando diagn√≥stico de configura√ß√µes de gateway de pagamento...');
    
    const tableExists = await checkTableStructure();
    if (!tableExists) {
      console.log('\n‚ö†Ô∏è Criando tabela de configura√ß√µes...');
      // C√≥digo para criar a tabela poderia ser adicionado aqui
    }
    
    const gateways = await listAllGateways();
    await checkForCommonIssues(gateways);
    
    // Interatividade para executar corre√ß√µes poderia ser adicionada aqui
    
    console.log('\n‚úÖ Diagn√≥stico conclu√≠do.');
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante o diagn√≥stico:', error);
  } finally {
    await pool.end();
  }
}

// Executar diagn√≥stico
main().catch(console.error);